<?xml version="1.0" encoding="utf-8"?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  autoReload="true"
  internalLogLevel="Info"
  internalLogFile="${environment:HOME}/logfiles/application/nlog-internal.log">

  <!-- enable asp.net core layout renderers -->
  <extensions>
    <add assembly="NLog.Web.AspNetCore" />
  </extensions>

  <!-- the targets to write to -->
  <targets>
    <!-- write logs to the visual studio code "debug console" -->
    <target name="logconsole" xsi:type="ColoredConsole" enableAnsiOutput="true" layout="${time}|${uppercase:${level:padding=5}}|${mdlc:item=ScopeName}|${ndlctiming:currentScope=true}|${logger}|${message} ${exception:format=tostring}" useDefaultRowHighlightingRules="true">
      <!-- explicitly use nlog color coding with a few adjustments for consistent display -->
      <highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" />
      <highlight-row condition="level == LogLevel.Error" foregroundColor="Yellow" />
      <highlight-row condition="level == LogLevel.Warn" foregroundColor="Magenta" />
      <highlight-row condition="level == LogLevel.Info" foregroundColor="Cyan" />
      <highlight-row condition="level == LogLevel.Debug" foregroundColor="Green" />
      <highlight-row condition="level == LogLevel.Trace" foregroundColor="DarkGray" />
    </target>

    <!-- write logs to an azure blobs stream target-->
    <!-- <target xsi:type="AzureDataTables" name="azureStorage"
      connectionString="${environment:CUSTOMCONNSTR_AzureStorageLogs}"
      tableName="WizardIdAppLogs">
      <contextproperty name="Level" layout="${uppercase:${level}}" />
      <contextproperty name="EventId" layout="${event-properties:item=EventId_Id}" />
      <contextproperty name="LoggerName" layout="${logger}" />
      <contextproperty name="Message" layout="${message:raw=true}" />
      <contextproperty name="FullMessage" layout="${message}" />
      <contextproperty name="Exception" layout="${exception:format=tostring}" />
      <contextproperty name="Query" layout="${aspnet-request-querystring}" />
      <contextproperty name="Url" layout="${aspnet-request-url}" />
      <contextproperty name="MachineName" layout="${machinename}" />
    </target> -->

    <!-- write logs to an azure log stream target-->
    <target xsi:type="file" name="azureLogStream"
      filename="${environment:HOME:cached=true}/logfiles/application/app-${machinename}-webdlanding.log"
      archiveDateFormat="yyyy-MM-dd HH_mm_ss"
      archiveNumbering="DateAndSequence"
      archiveAboveSize="104857600"
      archiveEvery="Day"
      maxArchiveDays="30"
      layout="${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|query: ${aspnet-request-querystring}|action: ${aspnet-mvc-action}" />
  </targets>

  <!-- rules to map from logger name to target -->
  <rules>
    <!-- write MHL to log console, so vscode tasks can auto launch our browser -->
    <logger name="Microsoft.Hosting.Lifetime" minlevel="Trace" writeTo="logconsole" final="true" />

    <!-- blackhole the duende debug and trace messages -->
    <logger name="Duende.*" maxlevel="debug" final="true" />
    <!-- dont catch microsoft, or system.net.http, HealthCHecksUi, or identityserver stuff -->
    <logger name="Microsoft.*" minlevel="Trace" final="true" />
    <logger name="System.Net.Http.*" minlevel="Trace" final="true" />
    <logger name="HealthChecks.UI.Core.HostedService.*" minlevel="Trace" final="true" />

    <!-- make sure we output all WizardId stuff to our debug window -->
    <logger name="*" minlevel="Trace" writeTo="logconsole" />

    <!-- make sure we output all logs to azure container storage -->
    <logger name="*" minlevel="Trace" writeTo="azureLogStream" />
  </rules>
</nlog>